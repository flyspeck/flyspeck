(* ========================================================================== *)
(* FLYSPECK - BOOK FORMALIZATION                                              *)
(*                                                                            *)
(* This is the "main" file of Flyspeck that loads all others as needed.       *)
(*                                                                            *)
(* Chapter: Build for all chapters                                            *)
(* Author: Thomas C. Hales                                                    *)
(* Date: 2010-07-14                                                           *)
(* ========================================================================== *)


(* 
   Build file for Flyspeck project.
   ocaml needs to be built with Unix.
   ocamlmktop unix.cma str.cma nums.cma -o ocampl

   See ocamlinit_hol_light.ml for scripts showing how this file is used.

*)

#load "unix.cma";;
#load "str.cma";;

(* HOL LIGHT *)

let flyspeck_dir = 
  (try Sys.getenv "FLYSPECK_DIR" with Not_found -> Sys.getcwd());;

let hollight_dir = 
  (try Sys.getenv "HOLLIGHT_DIR" with Not_found -> Sys.getcwd());;

(* jfp changed mem to List.mem *)
let add_to_load_path path =
  if List.mem path !load_path then ()
  else load_path := path :: !load_path;;

map add_to_load_path 
 [flyspeck_dir;
  (Filename.concat flyspeck_dir "../formal_ineqs");
  (Filename.concat flyspeck_dir "../jHOLLight/")
 ];;

let process_to_string unixstring = 
  let p = Unix.open_process_in unixstring
  and b = Buffer.create 64 in
  let rec read () = Buffer.add_channel b p 1; read () in
    try read () with End_of_file -> (Unix.close_process_in p; Buffer.contents b);;

let load_date = process_to_string "date";;

let time_msg msg f x =
  if not (!report_timing) then f x else
  let start_time = Sys.time() in
  try let result = f x in
      let finish_time = Sys.time() in
      report("CPU time (user): "^(string_of_float(finish_time -. start_time))^" in "^msg);
      result
  with e ->
      let finish_time = Sys.time() in
      Format.print_string("Failed after (user) CPU time of "^
                          (string_of_float(finish_time -. start_time))^": ");
      raise e;;

let flyspeck_version() = "Flyspeck ";;

let hollight_version() = "HOL Light ";;

let ocaml_version() = "Ocaml "^Sys.ocaml_version;;

let build_date() = "Build: " ^ process_to_string "date";;
let build_user() = "User: " ^ process_to_string "whoami";;
let indent = "   ";;

let build_report s =  build_date() ^ 
  indent ^ build_user() ^ 
  indent ^ hollight_version() ^ 
  indent ^ flyspeck_version() ^ 
  indent ^ ocaml_version() ^ "\n" ^ indent^ s^ "\n";;

let flyspeckpath s = Filename.concat flyspeck_dir s;;


(* boolean valued versions of Harrison's load files that return false
   if load was not a success *)

let use_file_b s =
  if not(Sys.file_exists s) 
  then (report ("File not found "^s); false)
  else 
    (Toploop.use_file Format.std_formatter s) || 
      (Format.print_string("Error in included file "^s);
       Format.print_newline(); false);;

let load_on_path_b p s =
  let s' = file_on_path p s in
  let fileid = (Filename.basename s',Digest.file s') in
    (use_file_b s' && (loaded_files := fileid::(!loaded_files);true));;

let loadb s = load_on_path_b (!load_path) s;;


(* debugging *)
loadt (flyspeckpath "general/parser_verbose.hl");;
loadt (flyspeckpath "general/debug.hl");;
(* Debug.set_verbose_parsing();; *)


(* limit changes in the state of the proof assistant  *)

let CHEAT_TAC = FAIL_TAC "cheaters never prosper";;
let new_axiom _ = failwith "new_axiom has been disabled.";; 
let mk_thm _ = failwith "mk_thm has been disabled.  Use mk_fthm";;


needs "Library/rstc.ml";;
needs "Rqe/num_calc_simp.ml";;  
needs "general/hol-library.hl";;

needs "general/print_types.hl";;

needs "general/hol_pervasives.hl";;
needs "general/prove_by_refinement.hl";;

needs "build/build.hl";;

let needb s =
  let s' = file_on_path (!load_path) s in
  let fileid = (Filename.basename s',Digest.file s') in
    if List.mem fileid (!loaded_files)
    then (Format.print_string("File \""^s^"\" already loaded\n");true) 
    else loadb s;;

let needs s =
  let s' = file_on_path (!load_path) s in
  let fileid = (Filename.basename s',Digest.file s') in
  if List.mem fileid (!loaded_files)
  then Format.print_string("File \""^s^"\" already loaded\n") 
  else 
    let _ = loadt s in
    let _ = Format.print_string("File \""^s'^"\" -successfully loaded\n") in
      ();;


let (prove,
     prove_by_refinement,
     REAL_RING,
     MESON,
     SET_RULE,
     REAL_ARITH,
     ARITH_RULE) = 
     (Hol_pervasives.prove,
     Prove_by_refinement.prove_by_refinement,
     Hol_pervasives.REAL_RING,
     Hol_pervasives.MESON,
     Hol_pervasives.SET_RULE,
     Hol_pervasives.REAL_ARITH,
     Hol_pervasives.ARITH_RULE);;

let () =
  try
    let _ = Sys.getenv "FLYSPECK_SERIALIZATION" in
    needs "build/use_serialization.hl"
  with Not_found -> ();;

needs "Multivariate/flyspeck.ml";; (* load before state manager *)

loadt (flyspeckpath "general/state_manager.hl");;
let reneeds s = loadt (flyspeckpath s);;
let rflyspeck_needs = reneeds;;

let flyspeckid s = 
  let s' = file_on_path (!load_path) (flyspeckpath s) in
    (Filename.basename s',Digest.file s');;





(* The dependency calculation in flyspeck_needs still has a bug if the
   file does not load correctly, but it calls another file that does load
   correctly.  It seems that the correctly loaded modules disappear from
   the scope when the error is encountered.  Thus, they should be
   filtered out as well from the depend statement.  For now, we offer
   depend_reset to clear the error.
*)

let (flyspeck_needs_untimed,filetable,depend,depend_reset)  =
  let ftable = ref [("pervasives",List.length (constants()))] in 
   (* associate constants with files *) 
  let depend = ref ([]:((string*Digest.t)*(string*Digest.t)) list) in 
   (* dependency table *)
  let host = ref (flyspeckid "build/build.hl") in
  let fn = fun s->
  let id = flyspeckid s in 
    if (List.mem id (!loaded_files))
    then Format.print_string("File \""^s^"\" already loaded\n")
    else
      (
        if List.mem (!host,id) (!depend) then failwith "There may be circular needs.";
	depend := (!host,id)::(!depend);	       
	let h = !host in 
        let _ = (host := id) in
        let b= needb (flyspeckpath s) in
        let _ = (host := h) in
	let _ = try State_manager.neutralize_state () with
	    Failure msg -> Format.print_string("File \""^s^
		 "\" has corrupted neutral state.\n"^msg^"\n") in
	  if b then (
            (ftable:= (s,List.length(constants()))::(!ftable));
	    Format.print_string("File \""^s^"\" successfully loaded\n"))
	  else (depend := filter ((<>) (h,id)) (!depend); 
            failwith ("Aborting Flyspeck Needs "^s))
      ) in
    (fn,(fun () -> !ftable),(fun() -> !depend),(fun() -> (depend:=[])));;

let flyspeck_needs s = time_msg s flyspeck_needs_untimed s;;

(* utilities *)

(* flyspeck_needs "general/flyspeck_utility.hl";; *)
let dest_goal gl = gl;;
let goal_asms = fst;;
let goal_concl = snd;;
let mk_goal(asl,w) = (asl,w);;

(* verbose error reporting *)

(* let prove_by_refinement = Debug.verbose Prove_by_refinement.prove_by_refinement;;  *)
(* let prove = Debug.verbose prove;; *)
 type_invention_warning:= false;;

let new_definition = Debug.verbose_1 new_definition;;
let ABBREV_TAC = Debug.verbose_1 ABBREV_TAC;;
let EXISTS_TAC = Debug.verbose_1 EXISTS_TAC;;

let define = Debug.define;;

(* This next one gets iterated in FIRST_ASSUM and creates multiple error messages *)
(* let ISPECL = Debug.verbose_thm ISPECL;; *)

(*  By default, the project will generate
    the main statement.  To do more, call one of the given options. *)

let build_and_report() = 
  let s = try
    (let _ = map flyspeck_needs Build.build_sequence_main_statement in  "full load completed")
  with Failure t -> t  in
  let oc = open_out_gen [Open_append;Open_text] 436 (flyspeckpath "logs/log.txt") in
  (Stdlib.output_string oc (build_report s); close_out oc);;

let do_build build_list = 
  let s = try
    (let _ = map flyspeck_needs build_list in  "full load completed")
  with Failure t ->  t  in
     build_report s;;

let build_list = ref Build.build_sequence_main_statement;;

let build_silent() = do_build !build_list;;

let try_do f  = 
  let rec try_dof = function
      [] -> [] 
    | (x::t) -> 
	try
	  (let y = f x in y:: try_dof t)
	with Failure _ -> [] 
	  | Not_found -> [] 
          | Sys_error _ -> [] in
    try_dof;;

let already_loaded s =
    List.mem (flyspeckid s) (!loaded_files);;

let new_build_silent() = 
  let loaded = try_do (fun s -> flyspeck_needs s; s) !build_list in
  let unloaded = filter(not o already_loaded) !build_list in
    (loaded,unloaded);;

let rec cut_after f a acc = function
  | [] -> acc
  | b::bs -> if (f b =a) then (b::acc) else cut_after f a (b::acc) bs;;

let reset_after s = 
  (loaded_files := cut_after fst s [] (List.rev (!loaded_files)));;

let reset () = (reset_after "hol_pervasives.hl"; depend_reset());;

(* let reset() = reset_after "flyspeck.ml";; *)

(*
let build_all() =
  (needs "Multivariate/flyspeck.ml"; 
   map (fun t -> State_manager.neutralize_state(); needs t) !build_list);;
*)

(*
State_manager.neutralize_state();;
new_build_silent();;
State_manager.neutralize_state();;
*)
