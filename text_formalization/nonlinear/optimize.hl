(* ========================================================================== *)
(* FLYSPECK - BOOK FORMALIZATION                                              *)
(*                                                                            *)
(* Chapter: nonlinear inequalities                                            *)
(* Author:  Thomas Hales     *)
(* Date: 2010-08-30                                                           *)
(* ========================================================================== *)


(*
Input is a nonlinear inequality.
preprocess_split_idq generates cases and does general preprocessing.
Output is executable interval arithmetic code in C++.
*)

(*
flyspeck_needs "general/sphere.hl";;
flyspeck_needs "nonlinear/ineq.hl";;
flyspeck_needs "nonlinear/nonlinear_lemma.hl";;
*)

module Optimize = struct

open Lib;;
open Nonlinear_lemma;;
open Hales_tactic;;

let length = List.length;;


let version = Flyspeck_lib.version;;

let ineq = Sphere.ineq;;
let all_forall = Sphere.all_forall;;
let add = Ineq.add;;


let nub = Flyspeck_lib.nub;;

let string_of_num' = Flyspeck_lib.string_of_num';;
let dest_decimal = Flyspeck_lib.dest_decimal;;

let strip_let_tm = Nonlinear_lemma.strip_let_tm;;

let output_filestring = Flyspeck_lib.output_filestring;;

let BY = Hales_tactic.BY;;
let unlist = Hales_tactic.unlist;;

(* from glpk_link.ml *)

let load_and_close_channel_true = Flyspeck_lib.load_and_close_channel_true;;

let load_file = Flyspeck_lib.load_file;;

(* ========================================================================= *)
(*    GENERAL PROCEDURES                                                  *)
(* ========================================================================= *)

(* The marker NONLIN is used in mk_all_ineq.hl, 
   where it is replaced with a constant equivalent to the conjunction of all the
   nonlinear ineqs.   *)

let NONLIN = new_definition `NONLIN = T`;;

let FROZEN_REWRITE_TAC ths = 
   if (ths=[]) then REWRITE_TAC [] else
     let th = end_itlist CONJ ths in
      FREEZE_THEN (fun t -> REWRITE_TAC[t]) th;;

let quoted s = let q = "\"" in (q^s^q);;

let paren s = "("^ s ^")";;

let real_ty = `:real`;;
let mk_x i = mk_var("x"^string_of_int i,real_ty);;
let mk_a i = mk_var("a"^string_of_int i,real_ty);;

let x9list =  map mk_x (1--9);;
let x10list =  map mk_x (1--10);;
let x6list = map mk_x (1--6);;
let a6list = map mk_a (1--6);;
let x_backlist = map mk_x [7;2;3;4;8;9];;

let xspec = SPECL x6list;;


let dest_ineq ineq = 
  let t = snd(strip_forall ineq) in
  let (vs,i) = dest_comb t in
  let (_,vs) = dest_comb vs in
  let vs = dest_list vs in
  let vs = map (fun t -> let (a,b) = dest_pair t in (a,dest_pair b)) vs in
  let vs = map (fun (a,(b,c)) -> (a, b, c)) vs in
    (t,vs,disjuncts i);;

let get_a_var tm = 
  let (_,ayb,_) = dest_ineq tm in
    map (fun (a,_,_) -> a) ayb;;


(* renames variables as x1,x2,x3,.... *)

let (X_RENAME_TAC:tactic) = 
   fun  gl  ->
     let (_,loc,_) = dest_ineq (goal_concl gl) in
     let loc' = map (fun (_,b,_) -> b) loc in
     let xvar = map mk_x (1 -- (length loc')) in
       EVERY (map SPEC_TAC (zip loc' xvar)) gl ;;


(* ========================================================================= *)
(*    SPLITTING INEQUALITIES AT h0                                           *)
(* ========================================================================= *)

let get_split_tags idq = 
  let ts = idq.tags in
  let rec gs = (function
    | [] -> []
    | (Split a::_) -> a 
    | _ :: rs -> gs rs) in
    gs ts;;

let split_2h0 = 
  let split_interval = prove(
    `! a b (y:real). (a <= y /\ y <= b) ==>
      ((a <= y /\ y <= m) \/ (m <= y /\ y <= b) )
      `,  REAL_ARITH_TAC) in
    INST [(`&2 * h0`,`m:real`)] split_interval;;

let split_2h0_strict = 
  let split_interval = prove(
    `! a b (y:real). (a <= y /\ y <= b) ==>
      ((a <= y /\ y <= m) \/ (m < y /\ y <= b) )
      `,  REAL_ARITH_TAC) in
    INST [(`&2 * h0`,`m:real`)] split_interval;;

let h0cutA = prove_by_refinement(
  `!y. (y <= &2 * h0) ==> ((h0cut y) = &1)`,
  (* {{{ proof *)
  [
  MESON_TAC[Sphere.h0cut]
  ]);;
  (* }}} *)

let h0cutB = prove_by_refinement(
  `!y. (&2 * h0 < y) ==> ((h0cut y) = &0)`,
  (* {{{ proof *)
  [
  REWRITE_TAC[Sphere.h0cut];
  REPEAT STRIP_TAC;
  BY(COND_CASES_TAC THEN REPEAT (FIRST_X_ASSUM MP_TAC) THEN REAL_ARITH_TAC)
  ]);;
  (* }}} *)

let h0cutC = prove_by_refinement(
  `!y. (y <= &2 * hminus) ==> (h0cut y = &1)`,
  (* {{{ proof *)
  [
  REPEAT STRIP_TAC;
  MATCH_MP_TAC h0cutA;
  MP_TAC Nonlinear_lemma.hminus_lt_h0;
  POP_ASSUM MP_TAC;
  BY(REAL_ARITH_TAC)
  ]);;
  (* }}} *)


let SPLIT_H0_TAC pos =  
  let destrict = REAL_ARITH `a < y /\ y <= b ==> a <= y /\ y <= b` in
 (REPEAT GEN_TAC) THEN
 (REWRITE_TAC[ineq_expand6]) THEN
 (REPLICATE_TAC (pos) DISCH_TAC) THEN
 (DISCH_THEN (fun t -> MP_TAC (MATCH_MP split_2h0_strict t))) THEN
 DISCH_THEN DISJ_CASES_TAC    THEN 
 ASM_SIMP_TAC[h0cutA;h0cutB;h0cutC] THENL
   [ALL_TAC;POP_ASSUM ( ASSUME_TAC o (MATCH_MP destrict))] THEN
 (REPEAT (POP_ASSUM MP_TAC)) THEN 
 (REWRITE_TAC[GSYM ineq_expand6]);;


(* WARNING: This disturbs the goal *)

let split_h0 (ineq,ss) = 
  let current_goals() = 
    map (fun (_,w) -> w) 
      ((fun (_,b,_) -> b) (hd (!current_goalstack))) in 
  let split_h0_term i inq = 
    let _ = g inq in
    let _ = e(SPLIT_H0_TAC i) in
      map all_forall (current_goals()) in 
  let _ = (length ss > 0)  || failwith "empty split" in
  let ineql = split_h0_term (hd ss) ineq in
   map (fun t-> (t, tl ss)) ineql;;

let rec split_all_h0 = function
  | [] -> []
  | (i,[])::rs -> i :: split_all_h0 rs
  | r::rs -> split_all_h0 (split_h0 r @ rs);;


(* C++ code generation was here, but has been moved to cpp_optimize.hl *)


(* ========================================================================== *)
(*    MEGA PREP    TACTICS                                                    *)
(* ========================================================================== *)

(* *************************************************************************** *)
(* PRELIM *)
(* *************************************************************************** *)

let macro_expand = (
   [
     Sphere.x1_delta_y;Sphere.delta4_squared_y;
     vol4f_palt;Nonlinear_lemma.y_of_x_e;
     gamma4fgcy_alt;
     Sphere.vol3r;Sphere.vol2f;Sphere.gamma4f;
     Sphere.gamma3f;  GSYM Nonlinear_lemma.quadratic_root_plus_curry;
     REAL_MUL_LZERO;
     REAL_MUL_RZERO;FST;SND;
     (* added taum_x June 29 2014 *) Sphere.taum_x; 
     Sphere.node2_y;Sphere.node3_y] @ 
     (!Ineq.dart_classes));;

let PRELIM_REWRITE_TAC = EVERY[
  (REWRITE_TAC[GSYM Sphere.rad2_y]) ;
  (REWRITE_TAC(macro_expand)) ;
];;

(* *************************************************************************** *)
(* BRANCH *)
(* *************************************************************************** *)

(* take care of branching *)

let BRANCH_TAC = EVERY[
  REWRITE_TAC[REAL_ARITH `x / &1 = x /\ &0 * x = &0 /\ &0 +x = x`];
  REWRITE_TAC[Sphere.gamma4f;vol4f_lmfun;Sphere.gamma3f;];
  REWRITE_TAC[ineq_expand6];
  DISCH_TAC;
  REPEAT GEN_TAC;
  REPEAT DISCH_TAC;
  ASSUM_LIST (let rec r = function | [] -> ALL_TAC | th::ths -> (MP_TAC (REPEAT_RULE (OR_RULE (MATCH_MP pathL_bound) (MATCH_MP pathR_bound)) th)) THEN r ths in r);
  REWRITE_TAC[];
  SIMP_TAC[c2001;
	   gcy_low;gcy_low_const;gcy_low_hminus;gcy_high;gcy_high_hplus;
           h0_lt_gt;
           lmdih3_ldih3;lmdih5_ldih5;lmdih_ldih;lmdih5_0;lmdih3_0;lmdih0;
           (* Oct 28, 2010:*) vol3f_lm0;vol3f_lmln;
           (* nov23 *) lmfun0;lmfun_lfun;hm0;
	 (* may 26, 2011. macro_expand was moved to prelim tac, 
	    so additional simps are needed. *)
	 lmdih1_0';lmdih3_0';lmdih5_0';
	 lmdih_ldih';lmdih3_ldih3';lmdih5_ldih5';
   ];
  SIMP_TAC[lmfun_lfun;lmfun0];
  REWRITE_TAC[REAL_ARITH `&0 * x = &0 /\ &0 + x = x`];
  REPEAT (DISCH_THEN (fun t-> ALL_TAC));
  REPEAT (POP_ASSUM MP_TAC);
  REWRITE_TAC[GSYM ineq_expand6];
  DISCH_TAC;
  EVERY (map SPEC_TAC [(`y6:real`,`y6:real`);(`y5:real`,`y5:real`);(`y4:real`,`y4:real`);(`y3:real`,`y3:real`);(`y2:real`,`y2:real`);(`y1:real`,`y1:real`)]);
  POP_ASSUM MP_TAC;
  REWRITE_TAC[Sphere.pathL;Sphere.pathR]; (*  moved May 24, 2011 *)
];;

(* *************************************************************************** *)
(* X_OF_Y. Convert y variables to x variables. *)
(* *************************************************************************** *)

let sq_pow2_6 = prove_by_refinement(
  `!a1 a2 a3 a4 a5 a6 x1 x2 x3 x4 x5 x6.
    a1 pow 2 <= x1 /\ a2 pow 2 <= x2 /\ a3 pow 2 <= x3 /\ a4 pow 2 <= x4 /\ a5 pow 2 <= x5 /\ a6 pow 2 <= x6
   ==> sqrt x1 * sqrt x1 = x1 /\ sqrt x2 * sqrt x2 = x2 /\ sqrt x3 * sqrt x3 = x3 /\ sqrt x4 * sqrt x4 = x4 /\ sqrt x5 * sqrt x5 = x5 /\ sqrt x6 * sqrt x6 = x6`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  BY(REPEAT CONJ_TAC THEN MATCH_MP_TAC sq_pow2 THEN ASM_MESON_TAC[])
  ]);;
  (* }}} *)

(* deprecate June 3, 2014 *)

  let SQRT_SQRT_TAC = 
EVERY[
  REPEAT DISCH_TAC;
  SUBGOAL_THEN `sqrt x1 * sqrt x1 = x1 /\ sqrt x2 * sqrt x2 = x2 /\ sqrt x3 * sqrt x3 = x3 /\ sqrt x4 * sqrt x4 = x4 /\ sqrt x5 * sqrt x5 = x5 /\ sqrt x6 * sqrt x6 = x6` (unlist REWRITE_TAC) THENL[ ASM_MESON_TAC[sq_pow2];ALL_TAC] THEN
  REPEAT (POP_ASSUM MP_TAC);
  DISCH_TAC;
];;

(*
  let SQRT_SQRT_TAC = EVERY[
  REPEAT DISCH_TAC;
  SUBGOAL_THEN `sqrt x1 * sqrt x1 = x1 /\ sqrt x2 * sqrt x2 = x2 /\ sqrt x3 * sqrt x3 = x3 /\ 
      sqrt x4 * sqrt x4 = x4 /\ sqrt x5 * sqrt x5 = x5 /\ sqrt x6 * sqrt x6 = x6` 
      (unlist REWRITE_TAC) 
  THENL [ REPEAT (FIRST_X_ASSUM (MP_TAC o (MATCH_MP sq_pow2))) THEN 
	    REPEAT DISCH_TAC THEN BY(ASM_REWRITE_TAC[]);ALL_TAC] THEN
  REPEAT (POP_ASSUM MP_TAC);
  DISCH_TAC;];;
*)

(* deprecated June 3, 2014 *)

let X_SQRT_COMPOUND_ORDER = 
[`norm2hh (sqrt x1) (sqrt x2) (sqrt x3) (sqrt x4) (sqrt x5) (sqrt x6) = 
     norm2hh_x x1 x2 x3 x4 x5 x6 `;  
`rad2_y (sqrt x1) (sqrt x2) (sqrt x3) (sqrt x4) (sqrt x5) (sqrt x6) = 
     rad2_x x1 x2 x3 x4 x5 x6 `;  
`delta4_y (sqrt x1) (sqrt x2) (sqrt x3) (sqrt x4) (sqrt x5) (sqrt x6) = 
     delta_x4 x1 x2 x3 x4 x5 x6 `;  
`delta4_y (sqrt x7) (sqrt x2) (sqrt x3) (sqrt x4) (sqrt x8) (sqrt x9) = 
   delta_x4 x7 x2 x3 x4 x8 x9 `; 
`dih2_y (sqrt x1) (sqrt x2) (sqrt x3) (sqrt x4) (sqrt x5) (sqrt x6) = 
     dih2_x x1 x2 x3 x4 x5 x6 `;  
`dih3_y (sqrt x1) (sqrt x2) (sqrt x3) (sqrt x4) (sqrt x5) (sqrt x6) = 
    dih3_x x1 x2 x3 x4 x5 x6 `;  
`dih_y (sqrt x1) (sqrt x2) (sqrt x3) (sqrt x4) (sqrt x5) (sqrt x6) = 
     dih_x x1 x2 x3 x4 x5 x6 `;  
`dih4_y (sqrt x1) (sqrt x2) (sqrt x3) (sqrt x4) (sqrt x5) (sqrt x6) = 
    dih4_x x1 x2 x3 x4 x5 x6 `;  
`dih5_y (sqrt x1) (sqrt x2) (sqrt x3) (sqrt x4) (sqrt x5) (sqrt x6) = 
   dih5_x x1 x2 x3 x4 x5 x6 `;  
`dih6_y (sqrt x1) (sqrt x2) (sqrt x3) (sqrt x4) (sqrt x5) (sqrt x6) = 
   dih6_x x1 x2 x3 x4 x5 x6 `;  
`delta_y (sqrt x1) (sqrt x2) (sqrt x3) (sqrt x4) (sqrt x5) (sqrt x6) = 
   delta_x x1 x2 x3 x4 x5 x6 `; 
`delta_y (sqrt x7) (sqrt x2) (sqrt x3) (sqrt x4) (sqrt x8) (sqrt x9) =
   delta_x x7 x2 x3 x4 x8 x9`;
`vol_y (sqrt x1) (sqrt x2) (sqrt x3) (sqrt x4) (sqrt x5) (sqrt x6) = 
   vol_x x1 x2 x3 x4 x5 x6 `;  
`eta_y (sqrt x1) (sqrt x2) (sqrt x6) pow 2 = eta2_126 x1 x2 x3 x4 x5 x6 `;  
`eta_y (sqrt x1) (sqrt x3) (sqrt x5) pow 2 = eta2_135 x1 x2 x3 x4 x5 x6 `;  
`eta_y (sqrt x4) (sqrt x5) (sqrt x6) pow 2 = eta2_456 x1 x2 x3 x4 x5 x6 `;  
`vol3f (sqrt x1) (sqrt x2) (sqrt x6)  sqrt2 lfun = vol3f_x_lfun x1 x2 x3 x4 x5 x6 `;  
`vol_y sqrt2 sqrt2 sqrt2 (sqrt x1) (sqrt x2) (sqrt x6)  = vol3_x_sqrt x1 x2 x3 x4 x5 x6 `;  
`vol3f_sqrt2_lmplus (sqrt x1) (sqrt x2) (sqrt x3) (sqrt x4) (sqrt x5)      (sqrt x6) =
   vol3f_x_sqrt2_lmplus x1 x2 x3 x4 x5 x6`;
 ];;

  let rec get_consts tm = 
    match tm with       
        Var(s,t) -> []
      | Const(s,t) -> [tm ]
      | Comb (t1,t2) -> get_consts t1 @ get_consts t2 
      | Abs (t1,t2) -> get_consts t1 @ get_consts t2 ;;

  let get_goal_const gl = 
    let w = goal_concl gl in
      get_consts w;;

(* added/revised June 3, 2014 *)

  let X_SQRT_COMPOUND_ORDER_TAC2 =  
    let ay6_xsqrt = [rad2_x_y;delta_x4_delta4_y;dih_x_y;dih2_x_y;delta_x_y;dih3_x_y;vol_x_y;sq_pow2_6] in
    let xsqrt9 = [tauq_x_y] in
    let xsqrt6 = [GSYM Sphere.norm2hh_x;GSYM Sphere.dih4_x;
		  GSYM Sphere.dih5_x;GSYM Sphere.dih6_x;GSYM Sphere.eta2_126;
		  GSYM Sphere.eta2_135;GSYM Sphere.eta2_456;GSYM vol3f_x_lfun;
		  GSYM vol3f_x_sqrt2_lmplus;GSYM vol3_x_sqrt;
		  GSYM Sphere.rhazim_x;GSYM Sphere.rhazim2_x;GSYM Sphere.rhazim3_x] in
    let a7 = [delta_x4_delta4_y;delta_x_y] in
    let f v t = not ( (fst o strip_forall o concl) t = v) in
    let _ = filter (f (a6list @ x6list)) (ay6_xsqrt @ a7) = [] || failwith "1" in
    let _ = filter (f (x9list)) xsqrt9 = [] || failwith "2" in 
    let _ = filter (f x6list) xsqrt6 = [] || failwith "3" in
    let spec9 = map SPEC_ALL xsqrt9 in
    let spec6 = map SPEC_ALL xsqrt6 in
    let aspec6 a = map SPEC_ALL (map (SPECL a) ay6_xsqrt) in
    let x7 = map (List.nth x9list) [6;1;2;3;7;8] in
    let aspec7 a =  (map (SPECL (a @ x7)) a7) in
    fun aspec ->
      let aspec' = if List.length aspec > 6 then fst (chop_list 6 aspec) else aspec in
      let aspec'' = if List.length aspec = 9 then aspec7 (map (List.nth aspec) [6;1;2;3;7;8]) else [] in
      let thms = end_itlist CONJ (spec9 @ spec6 @ (aspec6 aspec') @ aspec'')  in
	MP_TAC thms THEN ASM_REWRITE_TAC[] THEN DISCH_THEN (unlist REWRITE_TAC);;

let X_FROZEN_COMPOUND =(map SPEC_ALL [
 vol3r_126_x;REAL_ARITH `&2 = #2.0`;
 GSYM arclength_x_234;
 GSYM arclength_x_126;
 GSYM Functional_equation.nonf_gamma2_x1_div_a_v2;
 ] ) ;;

let decimal = REWRITE_RULE [REAL_ARITH `&2 = #2.0`];;

let X_COMPOUND_DEF =  [REAL_ARITH `&2 = #2.0`;
 beta_bump_force_x;
 GSYM Sphere.gchi1_x;GSYM Sphere.gchi2_x;
 GSYM Sphere.gchi3_x;GSYM Sphere.gchi4_x;
 GSYM Sphere.gchi5_x;GSYM Sphere.gchi6_x;
 GSYM Sphere.arclength_x1;GSYM Sphere.arclength_x2;
 GSYM Enclosed.quad_cross_diag2_x;
 tauq_x_y;] @ 
  map decimal [
 GSYM Sphere.ldih_x;GSYM Sphere.ldih2_x;
 GSYM Sphere.ldih3_x;GSYM Sphere.ldih6_x;
  ];;

let PRINT_TAC s gl = (report s; ALL_TAC gl);;

let X_OF_Y_TAC = 
  let arith_facts = REAL_ARITH `(&2 = #2.0) /\ (x pow 2 = x * x) /\ (#2.0 * #2.0 = #4.0) /\ 
    (#2.18 * #2.18 = #4.7524 ) /\ (#2.52 * #2.52 = #6.3504)` in
  (
  (DISCH_TAC) THEN
   fun gl ->
           let (_,a) = dest_goal gl in 
	   let a' = REWRITE_RULE basic_constants_nn (ASSUME a) in
	   let aspec = get_a_var (concl (xspec a')) in

  (
    TRY (MATCH_MP_TAC ineq_square2) THEN TRY (MATCH_MP_TAC ineq_square2_9) THEN
  (REWRITE_TAC basic_constants_nn) THEN
  REWRITE_TAC[GSYM CONJ_ASSOC] THEN
  (REPEAT (CONJ_TAC THENL[MP_TAC hminus_gt THEN MP_TAC sqrt3_nn THEN REWRITE_TAC[Sphere.h0;Sphere.hplus] THEN REAL_ARITH_TAC;ALL_TAC])) THEN
  (REPEAT GEN_TAC) THEN
  (REWRITE_TAC [sol_y_123;taum_123]) THEN
  (REWRITE_TAC[Sphere.ineq]) THEN
(*  (SQRT_SQRT_TAC) THEN *)
    (REPEAT DISCH_TAC) THEN
    (* remove x variable compound *)
    X_SQRT_COMPOUND_ORDER_TAC2 aspec THEN
    FROZEN_REWRITE_TAC X_FROZEN_COMPOUND THEN 
    REWRITE_TAC X_COMPOUND_DEF THEN
    (* repackage *)
    (REPEAT (FIRST_X_ASSUM MP_TAC)) THEN
    (REWRITE_TAC[GSYM ineq_expand10]) THEN
    (REWRITE_TAC[GSYM ineq_expand9]) THEN
    (REWRITE_TAC[GSYM ineq_expand6]) THEN
    (REWRITE_TAC[arith_facts;sqrt8_2;sqrt2_sqrt2;Sphere.h0;Sphere.hplus]) THEN
  ALL_TAC 
  ) gl);;



(* *************************************************************************** *)
(* SERIES3Q1H *)
(* *************************************************************************** *)

let SERIES3Q1H_5D_TAC = 
  let instjx = INST_TYPE [(`:real`,`:A`);(`:real`,`:B`);(`:real`,`:C`);
			  (`:real`,`:D`);(`:real`,`:E`);(`:real`,`:F`)] in
  let PROJX = map instjx [ proj_x1;proj_x2;proj_x3;proj_x4;proj_x5;proj_x6] in
  let projx = list_mk_conj (map (concl o GSYM) PROJX ) in
 (REPEAT STRIP_TAC   THEN MATCH_MP_TAC ineq6_of_ineq5) THEN
 (REWRITE_TAC[Sphere.pathL;Sphere.pathR;Sphere.hplus;Sphere.h0]) THEN
 (REWRITE_TAC[ineq_expand6]) THEN
 (REPEAT GEN_TAC THEN REPEAT DISCH_TAC) THEN
 (SUBGOAL_THEN projx (fun t -> PURE_ONCE_REWRITE_TAC[t])) THENL
 [(REWRITE_TAC PROJX);ALL_TAC] THEN
 (REPEAT (POP_ASSUM MP_TAC)) THEN
 (REWRITE_TAC[GSYM ineq_expand6]);;

(* *************************************************************************** *)
(* STYLIZE and WRAPUP *)
(* *************************************************************************** *)

let EXPAND_lfun = 
  (SUBGOAL_THEN `lfun x1 = (#1.26 - proj_x1  (x1:real) (x2:real) (x3:real) (x4:real) (x5:real) (x6:real))/(#0.26)` (unlist REWRITE_TAC)) THENL [
  REWRITE_TAC[Sphere.lfun;proj_x1;Sphere.h0;REAL_ARITH `#1.26 - &1 = #0.26`];ALL_TAC] ;;

let dummy_lemma = prove_by_refinement(
  `!(f:bool). (!(dummy:real). ineq [&1,dummy,&1] f) = (!(x1:real) (x2:real) (x3:real) (x4:real) (x5:real) (x6:real). ineq[(&1,x1,&1);(&1,x2,&1);(&1,x3,&1);(&1,x4,&1);(&1,x5,&1);(&1,x6,&1)] f)`,
  (* {{{ proof *)
  [
  REWRITE_TAC[ineq] THEN  MESON_TAC[REAL_ARITH `~(&2 <= &1)`];
  ]);;
  (* }}} *)

(* June 5, 2014 *)

let REMOVE_dummy = REWRITE_TAC[dummy_lemma];;

(*
let REMOVE_dummy = SUBGOAL_THEN `!(f:bool). (!(dummy:real). ineq [&1,dummy,&1] f) = (!(x1:real) (x2:real) (x3:real) (x4:real) (x5:real) (x6:real). ineq[(&1,x1,&1);(&1,x2,&1);(&1,x3,&1);(&1,x4,&1);(&1,x5,&1);(&1,x6,&1)] f)` (unlist REWRITE_TAC) THENL[  REWRITE_TAC[ineq] THEN  MESON_TAC[REAL_ARITH `~(&2 <= &1)`]; ALL_TAC];;
*)

let EXPAND_1var_lemma = prove_by_refinement(
  `!(f:real->bool) a b. (!(y:real). ineq [a,y,b] (f y)) = (!(x1:real) (x2:real) (x3:real) (x4:real) (x5:real) (x6:real). ineq[(a,x1,b);(&1,x2,&1);(&1,x3,&1);(&1,x4,&1);(&1,x5,&1);(&1,x6,&1)] (f x1))`,
  (* {{{ proof *)
  [
  REWRITE_TAC[Sphere.ineq] THEN  MESON_TAC[REAL_ARITH `(&1 <= &1)`];
  ]);;
  (* }}} *)

let EXPAND_10var_lemma = prove_by_refinement(
  `!f a1 b1 a2 b2 a3 b3 a4 b4 a5 a6 a7 b7 a8 a9 a10. (!y1 y2 y3 y4 y5 y6 y7 y8 y9 y10.
    ineq [(a1,y1,b1);(a2,y2,b2);(a3,y3,b3);(a4,y4,b4);(a5,y5,a5);
	  (a6,y6,a6);(a7,y7,b7);(a8,y8,a8);(a9,y9,a9);(a10,y10,a10)] (f y1 y2 y3 y4 y5 y6 y7 y8 y9 y10))
   = (!y1 y2 y3 y4 y5 y7.
    ineq [(a1,y1,b1);(a2,y2,b2);(a3,y3,b3);(a4,y4,b4);(a5,y5,a5);
	  (a7,y7,b7)] (f y1 y2 y3 y4 y5 a6 y7 a8 a9 a10))`,
  (* {{{ proof *)
  [
  REWRITE_TAC[Sphere.ineq];
  BY(MESON_TAC[REAL_ARITH `(a <= x /\ x <= a) <=> (x = a)`])
  ]);;
  (* }}} *)

let EXPAND_9var_lemma = prove_by_refinement(
  `!f a1 b1 a2 b2 a3 b3 a4 b4 a5 a6 a7 b7 a8 a9. (!y1 y2 y3 y4 y5 y6 y7 y8 y9.
    ineq [(a1,y1,b1);(a2,y2,b2);(a3,y3,b3);(a4,y4,b4);(a5,y5,a5);
	  (a6,y6,a6);(a7,y7,b7);(a8,y8,a8);(a9,y9,a9)] (f y1 y2 y3 y4 y5 y6 y7 y8 y9))
   = (!y1 y2 y3 y4 y5 y7.
    ineq [(a1,y1,b1);(a2,y2,b2);(a3,y3,b3);(a4,y4,b4);(a5,y5,a5);
	  (a7,y7,b7)] (f y1 y2 y3 y4 y5 a6 y7 a8 a9))`,
  (* {{{ proof *)
  [
  REWRITE_TAC[Sphere.ineq];
  BY(MESON_TAC[REAL_ARITH `(a <= x /\ x <= a) <=> (x = a)`])
  ]);;
  (* }}} *)

let EXPAND_var = REWRITE_TAC[EXPAND_1var_lemma;EXPAND_10var_lemma;EXPAND_9var_lemma];;

(*
let EXPAND_1var = SUBGOAL_THEN `!(f:real->bool) a b. (!(y:real). ineq [a,y,b] (f y)) = (!(x1:real) (x2:real) (x3:real) (x4:real) (x5:real) (x6:real). ineq[(a,x1,b);(&1,x2,&1);(&1,x3,&1);(&1,x4,&1);(&1,x5,&1);(&1,x6,&1)] (f x1))` (unlist REWRITE_TAC) THENL [REWRITE_TAC[ineq] THEN  MESON_TAC[REAL_ARITH `(&1 <= &1)`];ALL_TAC] ;;
*)

let REAL_SIMPLIFY_EXPRESSION =  let
  arith = REAL_ARITH `!x y z. (&8 = #8) /\ (x - y = x + (-- #1.0) * y) /\ 
  (x * (y+z) = x * y + x * z) /\ (y+z) * x = y * x + z * x /\ 
  (x + y) + z = x + y + z /\ (-- x * -- y = x * y) /\ (x * -- y = -- x * y) /\ 
  (-- x * y = -- (x * y)) /\ (x * y) * z = x * y * z /\ -- #1.0 * x = -- x /\ 
  -- (x + y) = -- x + (--y) /\ -- (-- x) = x /\ (-- (-- x * y) = x * y) /\
   #0.0 = &0 /\ #0 = &0 /\ &0 * x = &0 /\ x * &0 = &0 /\ (&0 + x = x) /\ 
  -- &0 = &0 /\ (x + &0 = x) /\ (&0 + x = x) /\
  &1 * x = x /\ -- &1 * x = -- x /\ x * sqrt8 = sqrt8 * x    ` in
  (REWRITE_TAC[REAL_POW_MUL;real_div;REAL_MUL_LZERO; REAL_MUL_RZERO;arith]) ;;

let EXPAND_SQRT = 
  (SUBGOAL_THEN `sqrt x1 = sqrt_x1 x1 x2 x3 x4 x5 x6 /\ sqrt x2 = sqrt_x2 x1 x2 x3 x4 x5 x6 /\ sqrt x3 = sqrt_x3 x1 x2 x3 x4 x5 x6 /\ sqrt x4 = sqrt_x4 x1 x2 x3 x4 x5 x6 /\ sqrt x5 = sqrt_x5 x1 x2 x3 x4 x5 x6 /\ sqrt x6  = sqrt_x6 x1 x2 x3 x4 x5 x6 /\ sqrt x8 = sqrt_x5 (x7:real) x2 x3 x4 x8 x9 /\ sqrt x9 = sqrt_x6 x7 x2 x3 x4 x8 x9 ` (unlist REWRITE_TAC)  THENL [REWRITE_TAC[sqrt_x1;sqrt_x2; sqrt_x3;sqrt_x4;sqrt_x5;sqrt_x6];ALL_TAC]) ;;

(* for 1d inequality involving vol2f marchal *)

let EXPAND_vol2 = 
REWRITE_TAC[vol2f_marchal_pow_y;vol2r_y] THEN
  SUBGOAL_THEN `x1 pow 1 = promote pow1 x1 x2 x3 x4 x5 x6 /\ 
  x1 pow 2 = promote_pow2 x1 x2 x3 x4 x5 x6 /\ 
  x1 pow 3 = promote_pow3 (x1:real) (x2:real) (x3:real) 
    (x4:real) (x5:real) (x6:real) /\ 
  x1 pow 4 = promote pow4 x1 x2 x3 x4 x5 x6` 
  (unlist REWRITE_TAC) 
  THENL[ REWRITE_TAC[promote;pow1;pow2;pow3;pow4;promote_pow2;promote_pow3];
	 REWRITE_TAC[LET_DEF;LET_END_DEF]] ;;

let DEF_expand = 
 [Sphere.a_spine5;Sphere.b_spine5;Sphere.mm1;
  Sphere.flat_term;Sphere.beta_bump_lb;REAL_POW_2;
  Sphere.h0;
  Sphere.mm2;GSYM Sphere.sqrt2;GSYM Sphere.sqrt3;
  GSYM Sphere.sqrt8;sol0_const1;sqrt2_sqrt8;
  Sphere.mm1;Sphere.mm2;Sphere.tau0;Sphere.hplus;
  tame_table_d_values;Sphere.vol2f;
  Sphere.lfun; (* added Oct 17, 2010 *)
 ];;


let STYLIZE_TAC = 
  let real_arith_lt = 
    REAL_ARITH `(x < y <=> (x- y < &0)) /\ (x <= y <=> (x-y <= &0))` in
  let real_arith_gt = 
    REAL_ARITH `(x > y <=> (y - x < &0) ) /\ (x >= y <=> (y-x <= &0))` in
  let real_arith_unit =  
    REAL_ARITH `unit0 * (x + y ) = unit0 * x + unit0 * y /\ 
    unit0 * --x = --(unit0 * x) /\ (unit0 * x  = x  * unit0) /\ 
    (x * y) * z = x * y * z` in
  let subgoal_proj = `x2 * unit0 = 
    proj_x2 (x1:real) (x2:real) (x3:real) (x4:real) (x5:real) (x6:real) /\ 
      x3 * unit0 = proj_x3 (x1) (x2) (x3) (x4) (x5) (x6) /\ 
    x1 * unit0 = proj_x1 (x1) (x2) (x3) (x4) (x5) (x6) /\
    (x4 * unit0 = proj_x4 x1 x2 x3 x4 x5 x6) /\
    (x5 * unit0 = proj_x5 x1 x2 x3 x4 x5 x6) /\ 
    (x6 * unit0 = proj_x6 x1 x2 x3 x4 x5 x6) /\
    ups_x x2 x3 x4 = ups234_x (x1:real) (x2:real) x3 x4 (x5:real) (x6:real) /\
    delta_x x1 x2 x3 x4 x5 (#4.0) = deltaL_x (#4.0) x1 x2 x3 x4 x5 x6 /\
    delta_x4 x1 x2 x3 x4 x5 (#4.0) = deltaL_x4 (#4.0) x1 x2 x3 x4 x5 x6 
  ` in
  let subgoal_unit6 = `unit0 = unit6
    (x1:real) (x2:real) (x3:real) (x4:real) (x5:real) (x6:real)` in
  REMOVE_dummy  THEN
  EXPAND_var THEN
  REWRITE_TAC[GSYM Nonlin_def.cayleytr6;GSYM Nonlin_def.cayleyR6] THEN
  REWRITE_TAC[ccayleytr6u;ccayleyR6u] THEN
  DISCH_TAC THEN REPEAT GEN_TAC THEN
  (* rename added Nov 27, 2010 *)
  X_RENAME_TAC THEN 
  REPEAT GEN_TAC THEN
  EXPAND_vol2 THEN
  (* prev line added Sep 8 , 2010 *)
  REWRITE_TAC  DEF_expand THEN
  (* prev line moved down sep 8 *)
  EXPAND_lfun THEN
  REWRITE_TAC[ineq] THEN
  (REPEAT DISCH_TAC) THEN
  (ONCE_REWRITE_TAC[real_arith_lt]) THEN
  (REWRITE_TAC[real_arith_gt]) THEN
  EXPAND_SQRT THEN
  REAL_SIMPLIFY_EXPRESSION THEN
  SUBGOAL_THEN `!a. x1:real * a = a * x1` (unlist REWRITE_TAC)
  THENL[REAL_ARITH_TAC;ALL_TAC] THEN (* added OCt 17, 2010 *)
  (SUBGOAL_THEN `!x. ((x < &0) <=> (unit0 * x < &0)) /\ 
     ((x <= &0) <=> (unit0 * x <= &0))` (unlist ONCE_REWRITE_TAC)) 
  THENL [REWRITE_TAC[unit0;REAL_ARITH `&1 * x = x`];ALL_TAC] THEN
  (REWRITE_TAC[REAL_ARITH `f x1 x2 x3 x4 x5 x6 * (y:real) = 
       y * f x1 x2 x3 x4 x5 x6 /\ ((x * y) * z = x * y * z)`]) THEN
  (REWRITE_TAC[real_arith_unit]) THEN
  (REWRITE_TAC[REAL_ARITH `unit0 * x = x * unit0`]) THEN
  (REWRITE_TAC[unit0f]) THEN
  (SUBGOAL_THEN subgoal_proj  (unlist REWRITE_TAC)
  THENL [REWRITE_TAC[proj_x3;proj_x4;proj_x5;proj_x6;proj_x2;
		    proj_x1;unit0;REAL_ARITH `x * &1 = x`;Nonlin_def.ups234_x;Nonlin_def.deltaL_x;Nonlin_def.deltaL_x4];ALL_TAC]) THEN
  (SUBGOAL_THEN subgoal_unit6  (unlist REWRITE_TAC) 
     THENL [REWRITE_TAC[unit0;unit6];ALL_TAC]) THEN
  (REPEAT (FIRST_X_ASSUM MP_TAC)) THEN
  (REWRITE_TAC[GSYM ineq_expand10]) THEN
  (REWRITE_TAC[GSYM ineq_expand9]) THEN
  (REWRITE_TAC[GSYM ineq_expand6]) THEN DISCH_TAC;;

let WRAPUP_TAC = 
  (REWRITE_TAC[REAL_ARITH `(x * y * (z:real)) = (x * y) * z`]) THEN
  (REWRITE_TAC[REAL_ARITH `(y:real) * f x1 x2 x3 x4 x5 x6 =  
       (f x1 x2 x3 x4 x5 x6) *  y `]) THEN
  (REWRITE_TAC[REAL_ARITH ` -- (x * y) = x * (-- y) `]) THEN
  (REWRITE_TAC[REAL_ARITH ` -- (f x1 x2 x3 x4 x5 x6) = 
       f x1 x2 x3 x4 x5 x6 * -- &1`]) THEN
  (REWRITE_TAC[REAL_ARITH `(x * y) * (z:real) = x * y * z`]) THEN
  (REWRITE_TAC[REAL_ARITH `inv y = (&1/y)`]);;

(* ========================================================================== *)
(*    VERIFYING INEQUALITIES                                                  *)
(* ========================================================================== *)

let idq_fields idq = (idq.idv,idq.tags, idq.ineq);;

let preprocess (s,tags,case) = 
  let is_xconvert = mem Xconvert tags in
  let is_branch = mem Branching tags in
  let _ = report ("process and exec: "^s) in
  let LET_ELIM_TAC = CONV_TAC (REDEPTH_CONV let_CONV) in
  let tacl = 
    [LET_ELIM_TAC;
     PRELIM_REWRITE_TAC;
     MP_TAC (REWRITE_RULE[] NONLIN);
     if (is_branch) then BRANCH_TAC else ALL_TAC;
     if (is_xconvert) then X_OF_Y_TAC else ALL_TAC;
     if (is_branch && not(is_xconvert)) then SERIES3Q1H_5D_TAC else ALL_TAC;
     STYLIZE_TAC;
     WRAPUP_TAC] in
  let _ = g (case) in
  let _ = e (EVERY tacl) in
  let testineq = snd(top_goal()) in
    (s,tags,testineq);;


(*

let get_firstexact s = idq_fields (hd(Ineq.getexact s));;

let process_and_exec_by_id ex s = 
  let testcase = get_firstexact  s in 
    process_and_exec ex s testcase;;

*)


let preprocess_split_idq idq = 
  let (s,tags,ineq) = idq_fields idq in
  let ineq_strip_let = strip_let_tm ineq in
  let suffix i n = Printf.sprintf "prep-%s split(%d/%d)" s i n in 
  let ls = get_split_tags idq in
    if (ls = []) then [preprocess ("prep-"^s,tags,ineq_strip_let)] else
      let cases = split_all_h0  [(ineq_strip_let, ls)] in
      let n = length cases in
	map (fun i ->
	    try preprocess (suffix i n,tags,List.nth cases i)
	    with Failure s -> failwith (s^ " case fail: " ^ (string_of_int i))) 
	  (0--(n-1));;





end;;
