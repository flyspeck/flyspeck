(* ========================================================================== *)
(* FLYSPECK - BOOK FORMALIZATION                                              *)
(*                                                                            *)
(* Chapter:  Final Conclusion                                           *)
(* Date: March 12, 2014                                                 *)
(* ========================================================================== *)

flyspeck_needs "../formal_lp/hypermap/ineqs/lp_ineqs.hl";;

module The_kepler_conjecture = struct

open Hales_tactic;;
open Tame_defs;;
open Tame_defs2;;
open Tame_list;;
open Hypermap;;
open The_main_statement;;

(* The remaining results add in the archive *)

let linear_programming_results = new_definition
  `linear_programming_results <=>
      (!V. lp_ineqs /\ lp_main_estimate /\
	 (?L. MEM L tame_archive_lists /\ 
	    iso (hypermap_of_fan (V,ESTD V)) (hypermap_of_list L)) ==>
	 ~(contravening V))`;;

(*
let good_linear_programming_results_lpr = prove_by_refinement(
  `good_linear_programming_results tame_archive_lists <=> 
    ALL good_list tame_archive_lists /\
    linear_programming_results`,
  (* {{{ proof *)
  [
  REWRITE_TAC[good_linear_programming_results;linear_programming_results];
  ]);;
  (* }}} *)
*)

let archive = new_definition' `archive = set_of_list tame_archive_lists`;;

let import_tame_classification = new_definition' 
  `import_tame_classification = 
  (!g. PlaneGraphs g /\ tame g ==> (?y. y IN archive /\ iso_fgraph (fgraph g) y))`;;

let import_tame_classification_tame = prove_by_refinement(
  `import_tame_classification = tame_classification tame_archive_lists`,
  (* {{{ proof *)
  [
  REWRITE_TAC[archive;import_tame_classification;tame_classification];
  ]);;
  (* }}} *)

parse_as_infix ("IN_simeq", (11, "right"));;

let IN_SIMEQ = new_definition'
  `!A (x:((A)list)list). 
  x IN_simeq A <=> (?(y:((B)list)list). y IN A /\ iso_fgraph x y)`;;

let import_tame_classification_alt = prove_by_refinement(
  `import_tame_classification <=> 
  (!g. g IN PlaneGraphs /\ tame g ==> fgraph g IN_simeq archive)`,
  (* {{{ proof *)
  [
    BY(REWRITE_TAC[import_tame_classification;IN_SIMEQ;IN])
  ]);;
  (* }}} *)

let kepler_conjecture_with_assumptions_and_archive = prove_by_refinement(
  `import_tame_classification /\
    linear_programming_results /\ 
    the_nonlinear_inequalities
    ==> the_kepler_conjecture
    `,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  INTRO_TAC kepler_conjecture_with_assumptions [`tame_archive_lists`];
  DISCH_THEN MATCH_MP_TAC;
  ASM_REWRITE_TAC[good_linear_programming_results;GSYM linear_programming_results];
  ASM_REWRITE_TAC[GSYM import_tame_classification_tame];
  MP_TAC Good_list_archive.good_list_archive;
  BY(REWRITE_TAC[Good_list_archive.good_list_archive])
  ]);;
  (* }}} *)

(* final result *)

let tame_nonlinear_imp_kepler_conjecture = 
  REWRITE_RULE[Linear_programming_results.linear_programming_results_th]
    kepler_conjecture_with_assumptions_and_archive;;

(* simple -> full corrected Sep 9, 2014 *)

(* check_md5 verifies that constants have not been altered from one session to another
   by checking a thm `c ==> c` against a stored md5 digest of the thm.
*)

(* let check_md5 c md5 = 
  let imp = mk_imp (c,c) in
  let _ = is_const c || failwith "constant expected in check_md5" in
  let th' = Serialization.canonize_thm (MESON[] imp) in
  let md5' = Serialization.full_digest_thm th' in
  let check = (md5' = md5) in
  let _ = if (not check) then 
    report ("FAILED MD5 CHECK "^(string_of_term c)^" "^md5') in 
    check;; *)

(* let check_nonlinear_md5 = 
  check_md5 `the_nonlinear_inequalities` "a4a27fe9b050b585a81af8414db2f340";; *)
   (* simple: "1f054717131cf915bd8cc95ab7b645c3" *)

(* (These hang because they too big a term)
let check_linear_md5 = 
  check_md5 `linear_programming_results` "0";;
   (* simple: "ff5f953dece7d2a4bb712303d0a7a179";; *)


let check_graph_md5 = 
  check_md5 `import_tame_classification` "0";;
   (* simple: "921b44e90681ed302d31b4f9ce93ddad";; *)

let check_kepler_conjecture_md5 = 
    check_md5 `the_kepler_conjecture` "0";;
   (* simple: "0fb2a76af8f8c13cbb7ea0d4e2ab4149";; *)

let check_all_md5 = 
  check_nonlinear_md5 &&
    check_linear_md5 &&
    check_graph_md5 &&
    check_kepler_conjecture_md5 ;;
*)

   (*  
       The file "nonlinear/mk_all_ineq.hl" uses 
       the "serialization" version of HOL Light to prove
       |- the_nonlinear_inequalities
   *)


 end;;
